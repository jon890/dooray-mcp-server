---
description:
globs:
alwaysApply: true
---

# Dooray MCP Server

- NHN Dooray 서비스의 MCP 서버를 제작하는 프로젝트이다.
- 해당 프로젝트는 kotlin을 사용하며, kotlin-mcp-sdk 0.5.0 버전을 사용한다.
- 외부에 공개할 프로젝트이므로, 절대로 personal token 등의 정보를 코드에 사용하지 않는다.

## 환경변수

- .env, .env.sample 파일은 Agent에서 읽을 수 없다
- 따라서 다음의 환경변수 샘플을 참고한다

```text
DOORAY_API_KEY=
DOORAY_BASE_URL=
DOORAY_PROJECT_ID=
DOORAY_TEST_PROJECT_ID=
DOORAY_TEST_WIKI_ID=
```

### 환경변수 상수 사용

환경변수는 `constants/EnvVariableConst.kt`에 정의된 상수를 사용한다:

```kotlin
import com.bifos.dooray.mcp.constants.EnvVariableConst.DOORAY_API_KEY
import com.bifos.dooray.mcp.constants.EnvVariableConst.DOORAY_BASE_URL
import com.bifos.dooray.mcp.constants.EnvVariableConst.DOORAY_PROJECT_ID

val baseUrl = env[DOORAY_BASE_URL] ?: throw IllegalStateException("...")
```

## Model Context Protocol

- 다음의 경로에 MCP에 대한 문서가 있다.
- https://modelcontextprotocol.io/introduction

## Dooray API Spec

- 다음의 경로에 Dooray API에 대한 문서가 있다
- https://helpdesk.dooray.com/share/pages/9wWo-xwiR66BO5LGshgVTg/2939987647631384419

## 개발 가이드

### Dooray API 타입 정의 방법

1. **types** 패키지에 새로운 API 응답 타입을 정의한다.
2. 모든 타입은 `@Serializable` 어노테이션을 사용한다.
3. 공통 응답 구조는 `DoorayApiResponse<T>`를 사용한다.

#### 예시:

```kotlin
@Serializable
data class NewApiResponse(
    val id: String,
    val name: String,
    val description: String? = null  // nullable 필드는 기본값 설정
)

typealias NewApiListResponse = DoorayApiResponse<List<NewApiResponse>>
```

### Dooray API 함수 추가 방법

1. **client/DoorayClient.kt** 인터페이스에 새로운 함수를 정의한다.
2. **client/DoorayHttpClient.kt**에 구체적인 구현을 추가한다.
3. 구체적인 타입을 반환하도록 한다 (`Any` 타입 사용 금지).
4. **템플릿 메소드 패턴**을 사용하여 공통 처리 로직을 활용한다.

#### 템플릿 메소드 패턴 사용:

**DoorayHttpClient.kt**에서는 다음 템플릿 함수들을 사용한다:

```kotlin
private suspend inline fun <reified T> executeApiCall(
    operation: String,
    expectedStatusCode: HttpStatusCode = HttpStatusCode.OK,
    successMessage: String? = null,
    crossinline apiCall: suspend () -> HttpResponse
): T

private suspend fun executeApiCallForNullableResult(
    operation: String,
    expectedStatusCode: HttpStatusCode = HttpStatusCode.OK,
    successMessage: String,
    apiCall: suspend () -> HttpResponse
): DoorayApiUnitResponse
```

#### 예시:

**client/DoorayClient.kt 인터페이스에 추가:**

```kotlin
suspend fun getNewApiData(id: String, filter: String? = null): NewApiListResponse
```

**client/DoorayHttpClient.kt 구현에 추가:**

```kotlin
override suspend fun getNewApiData(id: String, filter: String?): NewApiListResponse {
    return executeApiCall(
        operation = "GET /api/v1/new-endpoint/$id",
        successMessage = "✅ 새로운 데이터 조회 성공"
    ) {
        httpClient.get("/api/v1/new-endpoint/$id") {
            filter?.let { parameter("filter", it) }
        }
    }
}
```

### MCP Tool 추가 방법

1. **tools** 패키지에 각 도구별로 별도 파일을 생성한다.
2. 각 파일에 Tool 함수와 Handler 함수를 정의한다.
3. **DoorayMcpServer.kt**의 `registerTool()` 함수에 도구를 등록한다.
4. Tool 함수에서 `inputSchema`에 필수/선택 파라미터를 정의한다.
5. Handler 함수에서 **JSON 형태의 규격화된 응답**을 반환한다.

#### Tool 응답 규격화

모든 Tool은 다음과 같이 JSON 형태로 응답을 반환해야 한다:

**성공 응답:**

```json
{
  "success": true,
  "data": {
    /* 실제 데이터 */
  },
  "message": "성공 메시지"
}
```

**에러 응답:**

```json
{
  "success": false,
  "error": {
    "type": "PARAMETER_MISSING",
    "code": "MISSING_PROJECT_ID",
    "details": "추가 세부 정보"
  },
  "message": "에러 메시지"
}
```

#### 파일명 규칙:

- `Get{기능}Tool.kt` 형식으로 명명 (예: `GetWikisTool.kt`, `GetWikiPageTool.kt`)
- 한 파일에는 하나의 도구만 포함
- Tool과 Handler 함수를 같은 파일에 함께 정의

#### 필수 Import 구문:

```kotlin
package com.bifos.dooray.mcp.tools

import com.bifos.dooray.mcp.client.DoorayClient
import com.bifos.dooray.mcp.exception.ToolException
import com.bifos.dooray.mcp.types.ToolSuccessResponse
import com.bifos.dooray.mcp.utils.JsonUtils
import io.modelcontextprotocol.kotlin.sdk.CallToolRequest
import io.modelcontextprotocol.kotlin.sdk.CallToolResult
import io.modelcontextprotocol.kotlin.sdk.TextContent
import io.modelcontextprotocol.kotlin.sdk.Tool
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.jsonPrimitive
import kotlinx.serialization.json.put
import kotlinx.serialization.json.putJsonObject
```

#### 예외 처리 방법:

도구에서 예외를 처리할 때는 `ToolException`을 사용하여 JSON 형태로 반환:

```kotlin
// 파라미터 누락 에러
val errorResponse = ToolException(
    type = ToolException.PARAMETER_MISSING,
    message = "projectId 파라미터가 필요합니다.",
    code = "MISSING_PROJECT_ID"
).toErrorResponse()

CallToolResult(content = listOf(TextContent(JsonUtils.toJsonString(errorResponse))))

// API 에러
val errorResponse = ToolException(
    type = ToolException.API_ERROR,
    message = response.header.resultMessage,
    code = "DOORAY_API_${response.header.resultCode}"
).toErrorResponse()

// 내부 에러
val errorResponse = ToolException(
    type = ToolException.INTERNAL_ERROR,
    message = "내부 오류가 발생했습니다: ${e.message}",
    details = e.stackTraceToString()
).toErrorResponse()
```

#### 실제 구현 예시:

**tools/GetWikisTool.kt:**

```kotlin
package com.bifos.dooray.mcp.tools

import com.bifos.dooray.mcp.client.DoorayClient
import com.bifos.dooray.mcp.exception.ToolException
import com.bifos.dooray.mcp.types.ToolSuccessResponse
import com.bifos.dooray.mcp.utils.JsonUtils
import io.modelcontextprotocol.kotlin.sdk.CallToolRequest
import io.modelcontextprotocol.kotlin.sdk.CallToolResult
import io.modelcontextprotocol.kotlin.sdk.TextContent
import io.modelcontextprotocol.kotlin.sdk.Tool
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.jsonPrimitive
import kotlinx.serialization.json.put
import kotlinx.serialization.json.putJsonObject

fun getWikisTool(): Tool {
    return Tool(
        name = "get_wikis",
        description = "접근 가능한 위키 목록을 조회합니다. 프로젝트 이름으로 프로젝트 ID를 찾을 때 유용합니다.",
    inputSchema = Tool.Input(
        properties = buildJsonObject {
                putJsonObject("page") {
                    put("type", "number")
                    put("description", "페이지 번호 (선택사항)")
            }
                putJsonObject("size") {
                    put("type", "number")
                    put("description", "페이지 크기 (선택사항)")
            }
            }
        )
    )
}

fun getWikisHandler(doorayClient: DoorayClient): suspend (CallToolRequest) -> CallToolResult {
    return { request ->
    try {
            val page = request.arguments["page"]?.jsonPrimitive?.content?.toIntOrNull()
            val size = request.arguments["size"]?.jsonPrimitive?.content?.toIntOrNull()

            val response = doorayClient.getWikis(page, size)

        if (response.header.isSuccessful) {
                val successResponse = ToolSuccessResponse(
                    data = response.result,
                    message = "접근 가능한 위키 목록을 성공적으로 조회했습니다 (총 ${response.result.size}개)"
                )

                CallToolResult(content = listOf(TextContent(JsonUtils.toJsonString(successResponse))))
        } else {
                val errorResponse = ToolException(
                    type = ToolException.API_ERROR,
                    message = response.header.resultMessage,
                    code = "DOORAY_API_${response.header.resultCode}"
                ).toErrorResponse()

                CallToolResult(content = listOf(TextContent(JsonUtils.toJsonString(errorResponse))))
            }
        } catch (e: Exception) {
            val errorResponse = ToolException(
                type = ToolException.INTERNAL_ERROR,
                message = "내부 오류가 발생했습니다: ${e.message}",
                details = e.stackTraceToString()
            ).toErrorResponse()

            CallToolResult(content = listOf(TextContent(JsonUtils.toJsonString(errorResponse))))
        }
    }
}
```

**DoorayMcpServer.kt에 import 추가:**

```kotlin
import com.bifos.dooray.mcp.tools.getWikisTool
import com.bifos.dooray.mcp.tools.getWikisHandler
import com.bifos.dooray.mcp.tools.getWikiPagesTool
import com.bifos.dooray.mcp.tools.getWikiPagesHandler
import com.bifos.dooray.mcp.tools.getWikiPageTool
import com.bifos.dooray.mcp.tools.getWikiPageHandler
```

**DoorayMcpServer.kt의 registerTool() 함수에 추가:**

```kotlin
private fun registerTool(server: Server, doorayHttpClient: DoorayHttpClient) {
    // 위키 목록 조회 도구
    val wikisTool = getWikisTool()
    server.addTool(
        name = wikisTool.name,
        description = wikisTool.description ?: "",
        inputSchema = wikisTool.inputSchema,
        handler = getWikisHandler(doorayHttpClient)
    )

    // 위키 페이지 목록 조회 도구
    val wikiPagesTool = getWikiPagesTool()
    server.addTool(
        name = wikiPagesTool.name,
        description = wikiPagesTool.description ?: "",
        inputSchema = wikiPagesTool.inputSchema,
        handler = getWikiPagesHandler(doorayHttpClient)
    )

    // 위키 페이지 상세 조회 도구
    val wikiPageTool = getWikiPageTool()
    server.addTool(
        name = wikiPageTool.name,
        description = wikiPageTool.description ?: "",
        inputSchema = wikiPageTool.inputSchema,
        handler = getWikiPageHandler(doorayHttpClient)
    )
}
```

#### Tool 함수 구조 개선

복잡한 Tool Handler에서는 **파라미터 검증**과 **실제 로직**을 분리하여 가독성을 향상한다:

```kotlin
// 파라미터 검증 함수
private fun validateParams(request: CallToolRequest): CallToolResult? {
    // 검증 로직
    return null // 검증 통과 시 null 반환
}

// 파라미터 추출 함수
private fun extractParams(request: CallToolRequest): ParamsDataClass {
    // 파라미터 추출 로직
    return ParamsDataClass(...)
}

// 실제 로직 수행 함수
private suspend fun performAction(client: DoorayClient, params: ParamsDataClass): CallToolResult {
    // 실제 비즈니스 로직
    return CallToolResult(...)
}

// Handler 함수 (메인 진입점)
fun handler(doorayClient: DoorayClient): suspend (CallToolRequest) -> CallToolResult {
    return { request ->
        try {
            val validationResult = validateParams(request)
            if (validationResult != null) {
                validationResult
            } else {
                val params = extractParams(request)
                performAction(doorayClient, params)
            }
        } catch (e: Exception) {
            // 예외 처리
        }
    }
}
```

#### 중요한 주의사항:

- **JSON 응답 규격화**: 모든 Tool은 `ToolSuccessResponse` 또는 `ToolErrorResponse` 형태로 응답
- **예외 처리**: `ToolException`을 사용하여 일관된 에러 형태 제공
- **Import 오류 방지**: 새로운 도구를 추가할 때마다 `DoorayMcpServer.kt`에 해당 도구의 함수들을 개별적으로 import해야 합니다.
- **패키지 구조**: 모든 도구는 `com.bifos.dooray.mcp.tools` 패키지에 위치해야 합니다.
- **명명 규칙**: Tool 함수는 `get{기능}Tool()`, Handler 함수는 `get{기능}Handler()` 형식을 사용합니다.
- **JSON 직렬화**: `JsonUtils.toJsonString()`을 사용하여 객체를 JSON 문자열로 변환
- **함수 분리**: 복잡한 Tool Handler는 파라미터 검증, 파라미터 추출, 실제 로직 수행으로 분리

### 테스트 작성 가이드

#### 통합 테스트 구조

1. **추상 베이스 클래스**: `BaseDoorayIntegrationTest`를 상속하여 테스트 클래스를 구성한다.
2. **기능별 테스트 분리**: 위키, 프로젝트 업무, 댓글 등 기능별로 별도 테스트 클래스를 생성한다.
3. **환경변수 유틸**: `com.bifos.dooray.mcp.util.parseEnv()` 함수를 사용한다.
4. **테스트 데이터 정리**: 생성된 테스트 데이터를 추적하여 자동 정리한다.

#### 테스트 패키지 구조

```
src/test/kotlin/com/bifos/dooray/mcp/
├── client/dooray/
│   ├── BaseDoorayIntegrationTest.kt      # 추상 베이스 클래스
│   ├── WikiDoorayIntegrationTest.kt      # 위키 관련 테스트
│   └── ProjectPostDoorayIntegrationTest.kt # 프로젝트 업무 관련 테스트
├── util/
│   └── TestUtil.kt                       # 환경변수 파싱 유틸
└── ClientStdio.kt                        # 클라이언트 테스트
```

#### 추상 베이스 클래스 구조

```kotlin
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class BaseDoorayIntegrationTest {

    protected lateinit var testProjectId: String
    protected lateinit var testWikiId: String
    protected lateinit var doorayClient: DoorayClient

    // 테스트 데이터 추적
    protected val createdPostIds = mutableListOf<String>()
    protected val createdWikiPageIds = mutableListOf<String>()

    @BeforeAll
    fun setup() {
        val env = parseEnv()

        doorayClient = DoorayHttpClient(
            env[DOORAY_BASE_URL] ?: throw IllegalStateException("DOORAY_BASE_URL 환경변수가 설정되지 않았습니다."),
            env[DOORAY_API_KEY] ?: throw IllegalStateException("DOORAY_API_KEY 환경변수가 설정되지 않았습니다.")
        )

        testProjectId = env[DOORAY_TEST_PROJECT_ID] ?: throw IllegalStateException("DOORAY_TEST_PROJECT_ID 환경변수가 설정되지 않았습니다.")
        testWikiId = env[DOORAY_TEST_WIKI_ID] ?: throw IllegalStateException("DOORAY_TEST_WIKI_ID 환경변수가 설정되지 않았습니다.")
    }

    @AfterAll
    fun cleanup() = runTest {
        // 생성된 테스트 데이터 정리
        cleanupCreatedData()
    }
}
```

#### 테스트 작성 방법

1. **환경변수 상수 사용**: `EnvVariableConst`에서 정의된 상수를 사용한다.
2. **@DisplayName 사용**: 테스트 목적을 명확히 기술한다.
3. **given-when-then 패턴**: 코멘트로 테스트 구조를 명확히 한다.
4. **상속 구조 활용**: `BaseDoorayIntegrationTest`를 상속하여 공통 설정 재사용한다.
5. **테스트 데이터 관리**: 생성된 데이터를 추적 목록에 추가하여 자동 정리한다.

#### 테스트 예시:

```kotlin
class WikiDoorayIntegrationTest : BaseDoorayIntegrationTest() {

    @Test
    @DisplayName("내가 조회할 수 있는 위키 목록들이 조회된다")
    fun getWikisTest() = runTest {
        // when
        val response = doorayClient.getWikis()

        // then
        assertAll(
            { assertTrue { response.header.isSuccessful } },
            { assertEquals(response.header.resultCode, 0) }
        )

        response.result.let { wikis ->
            assertTrue { wikis.isNotEmpty() }
            wikis.forEach { wiki ->
                assertNotNull(wiki.id)
                assertNotNull(wiki.project.id)
                assertNotNull(wiki.name)
            }
        }
    }
}
```

### 빌드 및 실행

```bash
# 빌드
./gradlew clean shadowJar

# 테스트 (CI 환경에서는 통합 테스트 자동 제외)
./gradlew test

# 로컬 실행 (.env 파일 사용)
./gradlew runLocal

# 직접 실행 (환경변수 필요)
export DOORAY_API_KEY="your_api_key"
export DOORAY_BASE_URL="https://api.dooray.com"
java -jar build/libs/dooray-mcp-server-0.1.5-all.jar
```

### 테스트 환경 설정

#### CI/CD 환경

- **GitHub Actions**: `CI=true` 환경변수로 통합 테스트 자동 제외
- **통합 테스트**: 실제 Dooray API 호출이 필요하므로 CI에서 건너뜀
- **단위 테스트**: 모든 환경에서 실행

#### 로컬 환경

- **환경변수 있음**: 모든 테스트 실행 (단위 + 통합)
- **환경변수 없음**: 통합 테스트 제외하고 단위 테스트만 실행

### API 응답 타입 처리

#### `result: null` 응답 처리

일부 Dooray API는 성공 응답에서도 `result: null`을 반환할 수 있습니다. 이를 처리하기 위해 다음 타입들을 사용합니다:

```kotlin
// 일반적인 응답 (result가 반드시 존재)
data class DoorayApiResponse<T>(
    val header: DoorayApiHeader,
    val result: T
)

// result가 null일 수 있는 응답
data class DoorayApiNullableResponse<T>(
    val header: DoorayApiHeader,
    val result: T?
)

// Unit 타입을 위한 nullable response
typealias DoorayApiUnitResponse = DoorayApiNullableResponse<Unit>
```

#### 템플릿 메소드 패턴

**DoorayHttpClient.kt**에서는 다음 템플릿 함수들을 사용합니다:

```kotlin
// 일반적인 API 호출 (result가 반드시 존재)
private suspend inline fun <reified T> executeApiCall(
    operation: String,
    expectedStatusCode: HttpStatusCode = HttpStatusCode.OK,
    successMessage: String? = null,
    crossinline apiCall: suspend () -> HttpResponse
): T

// result가 null일 수 있는 API 호출
private suspend fun executeApiCallForNullableResult(
    operation: String,
    expectedStatusCode: HttpStatusCode = HttpStatusCode.OK,
    successMessage: String,
    apiCall: suspend () -> HttpResponse
): DoorayApiUnitResponse
```

#### 상태 변경 API 처리

업무/위키 상태 변경 API들은 `DoorayApiUnitResponse`를 반환합니다:

```kotlin
// 업무 상태 변경
suspend fun setPostWorkflow(projectId: String, postId: String, workflowId: String): DoorayApiUnitResponse
suspend fun setPostDone(projectId: String, postId: String): DoorayApiUnitResponse

// 위키 페이지 수정
suspend fun updateWikiPageTitle(wikiId: String, pageId: String, subject: String): DoorayApiUnitResponse
suspend fun updateWikiPageContent(wikiId: String, pageId: String, body: String): DoorayApiUnitResponse
```

### 버전 관리

#### 버전 관리 방법

프로젝트 버전은 다음 두 곳에서 관리됩니다:

1. **gradle.properties**: 빌드 시스템 버전 관리

```properties
project.version=0.1.5
mcp.version=0.5.0
ktor.version=3.1.1
logback.version=1.5.18
```

2. **VersionConst.kt**: 코드 내에서 버전 정보 참조

```kotlin
object VersionConst {
    const val VERSION = "0.1.5"  // gradle.properties와 동일하게 유지
    const val CHANGELOG = "..."  // 버전 히스토리
}
```

#### 버전 업데이트 절차

1. **gradle.properties**에서 `project.version` 업데이트
2. **VersionConst.kt**에서 `VERSION` 상수 동일하게 업데이트
3. **VersionConst.kt**에서 `CHANGELOG`에 변경사항 추가
4. 빌드 테스트: `./gradlew clean shadowJar`

### 현재 지원되는 MCP 도구 (총 16개)

#### 위키 관련 도구 (5개)

- `dooray_wiki_list_projects`: 접근 가능한 위키 프로젝트 목록 조회
- `dooray_wiki_list_pages`: 특정 위키의 페이지 목록 조회
- `dooray_wiki_get_page`: 특정 위키 페이지 상세 조회
- `dooray_wiki_create_page`: 새 위키 페이지 생성 (mimeType: "text/x-markdown" 자동 설정)
- `dooray_wiki_update_page`: 위키 페이지 통합 수정 (제목, 내용, 참조자 모두 수정 가능)

#### 프로젝트 관련 도구 (7개)

- `dooray_project_list_projects`: 접근 가능한 프로젝트 목록 조회
- `dooray_project_list_posts`: 프로젝트 업무 목록 조회 (다양한 필터 지원)
- `dooray_project_get_post`: 특정 업무 상세 조회
- `dooray_project_create_post`: 새 업무 생성
- `dooray_project_update_post`: 기존 업무 수정
- `dooray_project_set_post_workflow`: 업무 상태(workflow) 변경
- `dooray_project_set_post_done`: 업무 완료 처리

#### 댓글 관련 도구 (4개)

- `dooray_project_create_post_comment`: 업무 댓글 생성
- `dooray_project_get_post_comments`: 업무 댓글 목록 조회
- `dooray_project_update_post_comment`: 업무 댓글 수정
- `dooray_project_delete_post_comment`: 업무 댓글 삭제

### 주의사항

- **SLF4J 로깅**: 콘솔 출력 대신 SLF4J 로거 사용 (stdout은 MCP 통신용)
- **템플릿 메소드 패턴**: API 호출은 적절한 `executeApiCall*()` 템플릿 함수 사용
- **환경변수 상수**: `EnvVariableConst`에 정의된 상수 사용
- **API 응답 확인**: `header.isSuccessful`을 항상 확인
- **nullable 필드**: 기본값 설정 또는 `?` 표시
- **파라미터 유효성 검사**: 필수 파라미터 null 체크
- **Tool과 Handler 분리**: 재사용성 향상을 위한 구조
- **테스트 정리**: given-when-then 패턴과 명확한 DisplayName 사용
- **JSON 응답**: 모든 Tool 응답은 JSON 형태로 규격화하여 반환
- **예외 처리**: `ToolException`을 사용하여 일관된 에러 응답 제공
- **위키 페이지 mimeType**: 모든 위키 페이지 생성/수정 시 자동으로 `"text/x-markdown"` 설정
- **버전 동기화**: gradle.properties와 VersionConst.kt의 버전을 항상 동일하게 유지
