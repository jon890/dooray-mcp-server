name: Docker Build and Push

on:
  push:
    branches: [master, main]
    tags: ["v*"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: bifos/dooray-mcp
  # ARM64 빌드 활성화 여부 (ARM64 빌드에 문제가 있을 때 false로 설정)
  ENABLE_ARM64: false

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # ID token 생성을 위한 권한 추가
      id-token: write
      # attestation을 위한 추가 권한
      attestations: write
    timeout-minutes: 45
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from build.gradle.kts
        id: version
        run: |
          VERSION=$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 추출된 버전: $VERSION"

      - name: Set build platforms
        id: platforms
        run: |
          if [ "${{ env.ENABLE_ARM64 }}" = "true" ]; then
            echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "🏗️ AMD64 + ARM64 멀티 플랫폼 빌드"
          else
            echo "PLATFORMS=linux/amd64" >> $GITHUB_OUTPUT
            echo "🏗️ AMD64 단일 플랫폼 빌드 (ARM64 비활성화)"
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        if: env.ENABLE_ARM64 == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ steps.platforms.outputs.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}

      - name: Generate artifact attestation
        if: steps.docker-build.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.docker-build.outputs.digest }}
          push-to-registry: true
